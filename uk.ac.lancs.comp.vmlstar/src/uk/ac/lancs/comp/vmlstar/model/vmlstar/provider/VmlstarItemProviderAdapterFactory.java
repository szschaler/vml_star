/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package uk.ac.lancs.comp.vmlstar.model.vmlstar.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uk.ac.lancs.comp.vmlstar.model.vmlstar.util.VmlstarAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VmlstarItemProviderAdapterFactory extends VmlstarAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VmlstarItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.VmlModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VmlModelItemProvider vmlModelItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.VmlModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVmlModelAdapter() {
    if (vmlModelItemProvider == null) {
      vmlModelItemProvider = new VmlModelItemProvider(this);
    }

    return vmlModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.FeatureModelRef} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FeatureModelRefItemProvider featureModelRefItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.FeatureModelRef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFeatureModelRefAdapter() {
    if (featureModelRefItemProvider == null) {
      featureModelRefItemProvider = new FeatureModelRefItemProvider(this);
    }

    return featureModelRefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.Feature} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FeatureItemProvider featureItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.Feature}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFeatureAdapter() {
    if (featureItemProvider == null) {
      featureItemProvider = new FeatureItemProvider(this);
    }

    return featureItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.CoreModelRef} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CoreModelRefItemProvider coreModelRefItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.CoreModelRef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCoreModelRefAdapter() {
    if (coreModelRefItemProvider == null) {
      coreModelRefItemProvider = new CoreModelRefItemProvider(this);
    }

    return coreModelRefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.Concern} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConcernItemProvider concernItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.Concern}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConcernAdapter() {
    if (concernItemProvider == null) {
      concernItemProvider = new ConcernItemProvider(this);
    }

    return concernItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.Variant} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariantItemProvider variantItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.Variant}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVariantAdapter() {
    if (variantItemProvider == null) {
      variantItemProvider = new VariantItemProvider(this);
    }

    return variantItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.PointCutReference} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PointCutReferenceItemProvider pointCutReferenceItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.PointCutReference}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPointCutReferenceAdapter() {
    if (pointCutReferenceItemProvider == null) {
      pointCutReferenceItemProvider = new PointCutReferenceItemProvider(this);
    }

    return pointCutReferenceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.PointCut} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PointCutItemProvider pointCutItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.PointCut}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPointCutAdapter() {
    if (pointCutItemProvider == null) {
      pointCutItemProvider = new PointCutItemProvider(this);
    }

    return pointCutItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.PCEAndOperator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PCEAndOperatorItemProvider pceAndOperatorItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.PCEAndOperator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPCEAndOperatorAdapter() {
    if (pceAndOperatorItemProvider == null) {
      pceAndOperatorItemProvider = new PCEAndOperatorItemProvider(this);
    }

    return pceAndOperatorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.PCEOrOperator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PCEOrOperatorItemProvider pceOrOperatorItemProvider;

  /**
   * This creates an adapter for a {@link uk.ac.lancs.comp.vmlstar.model.vmlstar.PCEOrOperator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPCEOrOperatorAdapter() {
    if (pceOrOperatorItemProvider == null) {
      pceOrOperatorItemProvider = new PCEOrOperatorItemProvider(this);
    }

    return pceOrOperatorItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose() {
    if (vmlModelItemProvider != null) vmlModelItemProvider.dispose();
    if (featureModelRefItemProvider != null) featureModelRefItemProvider.dispose();
    if (featureItemProvider != null) featureItemProvider.dispose();
    if (coreModelRefItemProvider != null) coreModelRefItemProvider.dispose();
    if (concernItemProvider != null) concernItemProvider.dispose();
    if (variantItemProvider != null) variantItemProvider.dispose();
    if (pointCutReferenceItemProvider != null) pointCutReferenceItemProvider.dispose();
    if (pointCutItemProvider != null) pointCutItemProvider.dispose();
    if (pceAndOperatorItemProvider != null) pceAndOperatorItemProvider.dispose();
    if (pceOrOperatorItemProvider != null) pceOrOperatorItemProvider.dispose();
  }

}
